= form_for @linkedin_data, :html => {:class => "formNuevoDatosLinkedin", :id => "formEntradaDatos"} do |f|
  - if @linkedin_data.errors.any?
    #error_explanation
      h2 = "#{pluralize(@linkedin_data.errors.count, "error")} prohibited this linkedin_data from being saved:"
      ul
        - @linkedin_data.errors.full_messages.each do |message|
          li = message

  .form-horizontal.sectionInformation style="height: 1000px;"
    .box.informationLinkedin
      = t 'global.information'
      br
      br
      = f.hidden_field :client_id, :value => params[:idc]
      = f.hidden_field :social_network_id, :value => params[:id_social]
      - !@linkedin_data.start_date.nil? ? start_date = @linkedin_data.start_date.strftime("%d-%m-%Y") : start_date = get_start_date
      = f.label t 'global.start_date'
      .input-append.date data-date=start_date data-date-format="dd-mm-yyyy" id="start_date_picker"
        = f.text_field :start_date, :class => "span2", :value => start_date, :readonly => true
        span.add-on
          i.icon-th
      br
      br
      - !@linkedin_data.end_date.nil? ? end_date = @linkedin_data.end_date.strftime("%d-%m-%Y") : end_date = get_end_date
      = f.label t 'global.end_date'
      .input-append.date data-date=end_date data-date-format="dd-mm-yyyy" id="end_date_picker"
        = f.text_field :end_date, :class => "span2", :value => end_date, :readonly => true
        span.add-on
          i.icon-th

    .box.comunityLinkedin
      = t 'linkedin.community_title'
      br
      br
      = f.label t 'linkedin.actions_title'
      = f.text_field :actions, {:class => "validate[required]"}
      br
      br
      = f.label t 'linkedin.total_followers'
      = f.text_field :total_followers, {:class => "number validate[required]", :value => number_with_delimiter(f.object.total_followers, integer_format)}

    .box.interactionLinkedin
      = t 'global.interactivity_title'
      br
      br
      = f.label t 'linkedin.summary'
      = f.text_field :summary, {:class => "number validate[required]", :value => number_with_delimiter(f.object.summary, integer_format)}
      br
      br
      = f.label  t 'linkedin.employ'
      = f.text_field :employment, {:class => "number validate[required]", :value => number_with_delimiter(f.object.employment, integer_format)}
      br
      br
      = f.label t 'linkedin.products_services'
      = f.text_field :products_services, {:class => "number validate[required]", :value => number_with_delimiter(f.object.products_services, integer_format)}
      br
      br
      = f.label t 'linkedin.prints'
      = f.text_field :prints, {:class => "number validate[required]", :value => number_with_delimiter(f.object.prints, integer_format)}
      br
      br
      = f.label t 'linkedin.clics'
      = f.text_field :clics, {:class => "number validate[required]", :value => number_with_delimiter(f.object.clics, integer_format)}
      br
      br
      = f.label t 'linkedin.interest_percentage'
      = f.text_field :interest, {:class => "decimal validate[required]", :value => number_with_precision(f.object.interest, decimal_format)}
      br
      br
      = f.label t 'linkedin.recommendations'
      = f.text_field :recommendation, {:class => "number validate[required]", :value => number_with_delimiter(f.object.recommendation, integer_format)}
    .box.investmentLinkedin
      = t 'global.investment_title'
      br
      br
      = f.label t 'global.agency_investment'
      = f.text_field :investment_agency, {:class => "decimal validate[required]", :value => number_with_precision(f.object.investment_agency, decimal_format)}
      br
      br
      = f.label t 'global.new_actions_investment'
      = f.text_field :investment_actions, {:class => "decimal validate[required]", :value => number_with_precision(f.object.investment_actions, decimal_format)}
      br
      br
      = f.label t 'global.ads_investment'
      = f.text_field :investment_anno, { :class => "decimal validate[required]", :value => number_with_precision(f.object.investment_anno, decimal_format)}

    br
    br
    = f.submit (t 'buttons.save_data'), {:class => "btn btn-success saveLinkedin"}
    |     
    = link_to (t 'buttons.back'), linkedin_index_path(params[:idc],1), :class => "btn btn-inverse backLinkedin"
